function [decision_state_probability] = decode_state(ripple_time, ...
    position_time_stamps_binned, ...
    mark_spike_times, ...
    inital_conditions, ...
    state_transition_model, ...
    estimated_rate_all, ...
    mark_spike_by_tetrode, ...
    mark_spike_number_by_tetrode, ...
    marks, ...
    mark_spikes_to_linear_position_time_bins_index, ...
    mark_smoothing_standard_deviation, ...
    gaussian_kernel_position_estimator, ....
    position_occupancy, ...
    estimated_rate_by_tetrode, ...
    dt, ...
    num_linear_distance_bins ...
    )


numSteps = length(ripple_time);
decision_state_probability = zeros(numSteps, 4);
posterior_density = inital_conditions;

for time_step_ind = 1:numSteps
    spike_inds = find(mark_spike_times == position_time_stamps_binned(ripple_time(time_step_ind)));
    
    for decision_state_ind = 1:size(posterior_density, 2),
        one_step_prediction_density(:, decision_state_ind) = state_transition_model{decision_state_ind} * posterior_density(:, decision_state_ind);
    end
    
    if isempty(spike_inds) %if no spike occurs at time step
        likelihood(:, 1) = exp(-estimated_rate_all{1} .* dt);
        likelihood(:, 2) = exp(-estimated_rate_all{1} .* dt);
        likelihood(:, 3) = exp(-estimated_rate_all{2} .* dt);
        likelihood(:, 4) = exp(-estimated_rate_all{2} .* dt);
    else %if spikes
        likelihood_outbound = get_likelihood_by_state(1, num_linear_distance_bins, spike_inds, ...
            mark_spike_by_tetrode, mark_spike_number_by_tetrode, marks, mark_spikes_to_linear_position_time_bins_index, gaussian_kernel_position_estimator, position_occupancy, estimated_rate_by_tetrode, dt, mark_smoothing_standard_deviation);
        likelihood_inbound = get_likelihood_by_state(2, num_linear_distance_bins, spike_inds, ...
            mark_spike_by_tetrode, mark_spike_number_by_tetrode, marks, mark_spikes_to_linear_position_time_bins_index, gaussian_kernel_position_estimator, position_occupancy, estimated_rate_by_tetrode, dt, mark_smoothing_standard_deviation);
        
        likelihood(:, 1) = likelihood_outbound;
        likelihood(:, 2) = likelihood_outbound;
        likelihood(:, 3) = likelihood_inbound;
        likelihood(:, 4) = likelihood_inbound;
    end
    
    total_norm = sum(one_step_prediction_density(:) .* likelihood(:));
    posterior_density = one_step_prediction_density .* likelihood / total_norm;
    decision_state_probability(time_step_ind, :) = sum(posterior_density);
    
end

end